%{
#include <string>
#include <iostream>

#include "parser.h"
#include "lexer.h"

#include "ast/l.h"

#ifdef yylex
#undef yylex
#endif
#define yylex p.lexer->lex

#include <memory>

template <typename T>
std::shared_ptr<T> shared(T * ptr)
{
    return std::shared_ptr<T>(ptr);
}
%}

%parse-param { parser & p }
%define "parser_class_name" "generated_parser"
%error-verbose
%locations

%name-prefix "ast"

%union {
    int64_t integer;
    bool boolean;
    std::string * string;
    CodeEntry * code_entry;
    Declaration * declaration;
    Definition * definition;
    VarDeclaration * var_declaration;
    FuncDeclaration * fun_declaration;
    VarDefinition * var_definition;
    FuncDefinition * fun_definition;
    Type * type;
    std::list<VarDeclaration> * args;
    Statement * statement;
    Oper * oper;
    Expression * expr;
    std::list<Expression> * call_args;
}

%token              END         0   "end of file"
%token              SEMICOLON
%token              LPAREN
%token              RPAREN
%token              COMMA
%token              CLPAREN
%token              CRPAREN
%token              ASSIGN
%token              IF
%token              ELSE
%token              WHILE
%token              READ
%token              WRITE
%token              RETURN
%token              PLUS
%token              MINUS
%token              MULT
%token              DIV
%token              MOD
%token              LT
%token              GT
%token              EQ
%token              LE
%token              GE
%token              NE
%token              AND
%token              OR
%token              INTEGER_TYPE
%token              BOOLEAN_TYPE
%token              TRUE
%token              FALSE
%token  <integer>   INTEGER
%token  <string>    NAME

%type   <code_entry>        prog_item
%type   <declaration>       declaration
%type   <var_declaration>   var_def
%type   <fun_declaration>   fun_declaration fun_signature
%type   <args>              args args_tail
%type   <definition>        definition
%type   <fun_definition>    fun_def
%type   <type>              type
%type   <string>            name
%type   <statement>         statement statements
%type   <boolean>           bool
%type   <integer>           int
%type   <oper>              operator
%type   <expr>              expr
%type   <call_args>         call_args call_args_tail

%destructor { delete $$; } NAME
%destructor { delete $$; } prog_item
%destructor { delete $$; } declaration
%destructor { delete $$; } definition
%destructor { delete $$; } var_def
%destructor { delete $$; } fun_declaration fun_signature
%destructor { delete $$; } fun_def
%destructor { delete $$; } type
%destructor { delete $$; } args args_tail
%destructor { delete $$; } statement statements
%destructor { delete $$; } expr
%destructor { delete $$; } call_args call_args_tail

%%

start:
          /* empty */       { }
        | prog_item start   { p.code.entries.push_front(*$1); }
        ;

prog_item:
          declaration       { $$ = new CodeEntry(*$1); }
        | definition        { $$ = new CodeEntry(*$1); }
        ;

declaration:
          fun_declaration   { $$ = new Declaration(*$1); }
        ;

definition:
          var_def SEMICOLON { $$ = new Definition(*$1); }
        | fun_def           { $$ = new Definition(*$1); }
        ;

fun_declaration:
          fun_signature SEMICOLON { $$ = $1; }
        ;

fun_signature:
          type name LPAREN args RPAREN
            { $$ = new FuncDeclaration{shared(&@$), *$1, *$2, *$4}; }
        ;
          
args:
          /* empty */           { $$ = new std::list<VarDeclaration>; }
        | type name args_tail   { $3->push_front({shared(&@$), *$1, *$2}); $$ = $3; }
        ;

args_tail:
          /* empty */               { $$ = new std::list<VarDeclaration>; }
        | COMMA type name args_tail { $4->push_front({shared(&@$), *$2, *$3}); $$ = $4; }
        ;

var_def:
          type name { $$ = new VarDeclaration{shared(&@$), *$1, *$2}; }
        ;

fun_def:
          fun_signature CLPAREN statements CRPAREN
            { $$ = new FuncDefinition{shared(&@$), *$1, *$3}; }
        ;

statements:
          /* empty */           { $$ = new Statement(Skip()); }
        | statement statements  { $$ = new Statement(Seq{shared(&@$), shared($1), shared($2)}); }

statement:
          var_def SEMICOLON       { $$ = new Statement(*$1); }
        | name ASSIGN expr SEMICOLON  { $$ = new Statement(Assignment{ shared(&@$), *$1, *$3 }); }
        | IF LPAREN expr RPAREN statement ELSE statement { $$ = new Statement(If{shared(&@$), *$3, shared($5), shared($7) }); }
        | CLPAREN statements CRPAREN { $$ = $2; }
        | WHILE LPAREN expr RPAREN statement { $$ = new Statement(While{shared(&@$), *$3, shared($5)}); }
        | READ LPAREN name RPAREN SEMICOLON { $$ = new Statement(Read{ shared(&@$), *$3 }); }
        | WRITE LPAREN expr RPAREN SEMICOLON { $$ = new Statement(Write{ shared(&@$), shared($3) }); }
        | RETURN expr SEMICOLON   { $$ = new Statement(Return{ shared(&@$), shared($2) }); }
        ;

expr:
          bool               { $$ = new Expression(Value($1)); }
        | int                { $$ = new Expression(Value($1)); }
        | name               { $$ = new Expression(Value(*$1)); }
        | expr operator expr { $$ = new Expression(BinOperator{shared(&@$), shared($1), shared($3), *$2}); }
        | MULT expr          { $$ = new Expression(Dereference{shared(&@$), shared($2)}); }
        | name LPAREN call_args RPAREN { $$ = new Expression(Call{shared(&@$), *$1, *$3}); }
        ;

call_args:
          /* empty */           { $$ = new std::list<Expression>; }
        | expr call_args_tail   { $2->push_front(*$1); $$ = $2; }
        ;

call_args_tail:
          /* empty */               { $$ = new std::list<Expression>; }
        | COMMA expr call_args_tail { $3->push_front(*$2); $$ = $3; }
        ;

operator:
          PLUS  { $$ = new Oper{shared(&@$), Oper::PLUS}; }
        | MINUS { $$ = new Oper{shared(&@$), Oper::MINUS}; }
        | MULT  { $$ = new Oper{shared(&@$), Oper::MULT}; }
        | DIV   { $$ = new Oper{shared(&@$), Oper::DIV}; }
        | MOD   { $$ = new Oper{shared(&@$), Oper::MOD}; }
        | LT    { $$ = new Oper{shared(&@$), Oper::LT}; }
        | GT    { $$ = new Oper{shared(&@$), Oper::GT}; }
        | EQ    { $$ = new Oper{shared(&@$), Oper::EQ}; }
        | LE    { $$ = new Oper{shared(&@$), Oper::LE}; }
        | GE    { $$ = new Oper{shared(&@$), Oper::GE}; }
        | NE    { $$ = new Oper{shared(&@$), Oper::NE}; }
        | AND   { $$ = new Oper{shared(&@$), Oper::AND}; }
        | OR    { $$ = new Oper{shared(&@$), Oper::OR}; }
        ;

type:
          INTEGER_TYPE          { $$ = new Type(AtomType{shared(&@$), AtomType::INT}); }
        | BOOLEAN_TYPE          { $$ = new Type(AtomType{shared(&@$), AtomType::BOOL}); }
        | type MULT             { $$ = new Type(PointerType({ shared(&@$), shared($1) })); }
        | LPAREN type RPAREN    { $$ = $2; }
        ;

name:
          NAME          { $$ = $1; }
        ; 

bool:
          TRUE          { $$ = true; }
        | FALSE         { $$ = false; }
        ;

int     :
          INTEGER       { $$ = $1; }
        ;

%%

void ast::generated_parser::error(const ast::generated_parser::location_type & l,
                        const std::string & m)
{
    std::cerr << l << ": " << m << std::endl;
}
